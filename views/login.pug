html
  head
    title Login Demo
    link(rel="stylesheet" href="/style.css")
  body
    div.top
      a#connectWallet(onClick="connectWallet()" href="#").pull-left Connect Wallet
      a#publicAddress.pull-left.hide
      a(href="/users_only_page").pull-right Secret Page
    #error.hide Error:
    div#login.main
      button#loginButton(onClick="initAuth()") Login Here
      hr
      button(onClick="state.createUser = true")#createUserBtn Create New Account
    div#createUser.main.hide
      div#userInfo
        label User Name:
        br
        input(placeholder="Enter User Name")

      button(onClick="createNewUser()")#createUserBtn Sign Up
      hr
      button#cancel(onClick="state.createUser = false" href="#") Cancel

script(src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.25.0/axios.min.js") 
script(src="https://cdnjs.cloudflare.com/ajax/libs/web3/1.6.1/web3.min.js")
script.
  let web3, publicAddress, state = {};
  connectWallet();

  /* Connect Ethereum Wallet */
  function connectWallet(){
    if(!window.ethereum) console.error("window.ethereum not found"); 
    else{
      web3 = new Web3(window.ethereum);
      window.ethereum.enable()
        .then(() => {
          return web3.eth.getCoinbase(); /* Gets The Public Address */
        })
        .then(address => {
          publicAddress = address;
        })
        .catch(err => console.error("client has not enabled wallet", err));
    }
  }

  /* Initialize Authenticate */
  function initAuth(){
    axios.get(`/api/user/${publicAddress}/message`)
      .then(({ data }) => {
        if(!data.message) console.warn(`No User Found Associated With Public Address:${publicAddress}`);
        else return data.message;
      })
      .catch(err => {
        if(err.message.includes("404")){
          _alertError(`No User Found For Public Address "${publicAddress.substr(0, 8)}..."\n=> Create New User!`);
        }
        else _alertError(err);
      })
      .then(message => {
        return signMessage(publicAddress, message);
      })
      .then(signature => {
        return requestAuthorizedSession(publicAddress, signature);
      })
      .catch(err => console.error("Failed To Autheticate"));
  }

  /* Sign Message */
  function signMessage(publicAddress, message){
    return new Promise((resolve, reject) => {
      const encodedMessage = web3.utils.fromUtf8(message);
      web3.eth.personal.sign(encodedMessage, publicAddress, (err, signature) => {
        if(err) reject(err);
        else resolve(signature);
      })
    });
  }

  /* Request Authorized Session */
  function requestAuthorizedSession(publicAddress, signature){
    const body = { publicAddress, signature };
    axios.post('/api/authenticate', body)
      .then(() => {
        /* Redirect To Users Only Page */
        document.location = "/users_only_page";
      })
      .catch(err => console.error("Failed To Authenticate"));
  }

  function createNewUser(){
    const userName = document.querySelector('#createUser input').value;
    const userData = { userName };

    const body = { publicAddress, userData };
    axios.post('/api/user', body)
      .then(() => {
        initAuth();
        document.querySelector('#createUser input').value = "";
      })
      .catch(err => {
        console.error("Failed to create user");
      })
  }

  function updateDom(){
    if(web3 && publicAddress) {
      _hide('#connectWallet');
      _setText('#publicAddress', `Connected:${publicAddress.substr(0, 8)}...`);
      _show('#publicAddress');
    }

    if(state.createUser){
      _hide('#login');
      _show('#createUser');
    }
    else{
      _show('#login');
      _hide('#createUser');
    }
  }

  function _hide(selector){
    const element = document.querySelector(selector);
    element.classList.add("hide");
  }

  function _show(selector){
    const element = document.querySelector(selector);
    element.classList.remove("hide");
  }

  function _setText(selector, text){
    const element = document.querySelector(selector);
    element.innerText = text;
  }

  function _alertError(message){
    const el = document.querySelector('#error.hide');
    el.innerText = message;
    _show('#error.hide');
    setTimeout(() => {
      _hide('#error');
    }, 5000);
  };

  setInterval(updateDom, 500);